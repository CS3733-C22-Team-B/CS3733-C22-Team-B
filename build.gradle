plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id "io.freefair.lombok" version "5.0.0-rc6"
    id 'org.openjfx.javafxplugin' version '0.0.10'
}
mainClassName = 'edu.wpi.cs3733.c22.teamB.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
}


dependencies {
    String javaFxVersion = '17'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation(
            'com.jfoenix:jfoenix:9.0.10',

            // You may comment out the database dependency you do not use
            'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.15.2.0',

            // requirements for apache derby
            'org.apache.derby:derby:10.15.2.0',
            'org.apache.derby:derbytools:10.15.2.0',
            'org.apache.derby:derbyclient:10.15.2.0',

            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',
    )

    testCompile(
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
    )
}


test {
    useJUnitPlatform()
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

def codeCoverageExcludes = [
        'edu.wpi.cs3733.c22.teamB.Main',
        'edu.wpi.cs3733.c22.teamB.controllers.MedicineDeliveryService',
        'edu.wpi.cs3733.c22.teamB.Bapp',
        'edu.wpi.cs3733.c22.teamB.controllers.HomeController',
        'edu.wpi.cs3733.c22.teamB.controllers.MedicalEquipmentDeliveryServiceController',
        'edu.wpi.cs3733.c22.teamB.controllers.FoodDeliveryService',
        'edu.wpi.cs3733.c22.teamB.controllers.ExternalTransportController',
        'edu.wpi.cs3733.c22.teamB.controllers.GiftFloralServiceController',
        'edu.wpi.cs3733.c22.teamB.controllers.LaundryController'
]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

//check.dependsOn jacocoTestCoverageVerification
//jacocoTestCoverageVerification.dependsOn jacocoTestReport
//compileJava.dependsOn 'spotlessApply'

spotless {
    java {
        googleJavaFormat()
        indentWithTabs(2)
        indentWithSpaces(4)
    }
}

run {
    standardInput = System.in
}